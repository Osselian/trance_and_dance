// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
    id                    Int                     @id @default(autoincrement())
    email                 String                  @unique
    username              String                  @unique
    password              String?                 //passsword hash 
    googleId              String?                 @unique
    avatarUrl             String?                 @default("../data/default/default_avatar.jpg")
    wins                  Int                     @default(0)
    losses                Int                     @default(0)
    online                Boolean                 @default(false)
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt

	//friendship 
	friendRequestSent     Friendship[]            @relation("FriendReqSent")
	friendRequestReceived Friendship[]            @relation("FriendReqReceived")

	//match history
	matchPlayerA          Match[]                 @relation("Player1")
	matchPlayerB          Match[]                 @relation("Player2")

	chatMsgSent           ChatMessage[]           @relation("Sender")
	chatMsgReceived       ChatMessage[]           @relation("Receiver")

	tournamentParticipant TournamentParticipant[]
}

model Friendship {
	id          Int              @id @default(autoincrement())
	requester   User             @relation("FriendReqSent", fields: [requesterId], references: [id])
	requesterId Int
	receiver    User             @relation("FriendReqReceived", fields: [receiverId], references: [id])
	receiverId  Int
	status      FriendshipStatus @default(PENDING)
	createdAt   DateTime         @default(now())

	@@unique([requesterId, receiverId])
}

model Match {
	id        Int      @id @default(autoincrement())
	player1   User     @relation("Player1", fields: [player1Id], references: [id])
	player1Id Int
	player2   User     @relation("Player2", fields: [player2Id], references: [id])
	player2Id Int
	playedAt  DateTime @default(now())
	result    String?
}

model Tournament {
	id           Int                      @id @default(autoincrement())
	name         String
	description  String?
	startDate    DateTime
	endDate      DateTime
	participants TournamentParticipant[]
}

model TournamentParticipant {
	id           Int        @id @default(autoincrement())
	tournament   Tournament @relation(fields: [tournamentId], references: [id])
	tournamentId Int
	user         User       @relation(fields: [userId], references: [id])
	userId       Int
	registeredAt DateTime   @default(now())

	@@unique([tournamentId, userId])
}

model ChatMessage {
	id         Int      @id @default(autoincrement())
	sender     User     @relation("Sender", fields: [senderId], references: [id])
	senderId   Int
	receiver   User?    @relation("Receiver", fields: [receiverId], references: [id])
	receiverId Int?
	content    String
	sentAt     DateTime @default(now())
}

enum FriendshipStatus {
	PENDING 
	ACCEPTED
	REJECTED
}