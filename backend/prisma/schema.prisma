// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
    id                    Int                     @id @default(autoincrement())
    email                 String                  @unique
    username              String                  @unique
    password              String?                 //passsword hash 
    googleId              String?                 @unique
    avatarUrl             String?                 @default("../data/default/default_avatar.jpg")
    wins                  Int                     @default(0)
    losses                Int                     @default(0)
	rating                Int                     @default(1200)
    online                Boolean                 @default(false)
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
	friendRequestSent     Friendship[]            @relation("FriendReqSent")
	friendRequestReceived Friendship[]            @relation("FriendReqReceived")
	matchPlayerA          Match[]                 @relation("Player1")
	matchPlayerB          Match[]                 @relation("Player2")
	matchmakingRequest    MatchMakingRequest[]    @relation("UserMatchRequest")
	chatMsgSent           ChatMessage[]           @relation("Sender")
	chatMsgReceived       ChatMessage[]           @relation("Receiver")
	tournamentParticipant TournamentParticipant[]
	blocker               Block[]                 @relation("Blocker")
	blocked               Block[]                 @relation("Blocked")
	inviter               GameInvitation[]        @relation("Inviter")
	invitee               GameInvitation[]        @relation("Invitee")
}

model Friendship {
	id          Int              @id @default(autoincrement())
	requester   User             @relation("FriendReqSent", fields: [requesterId], references: [id])
	requesterId Int
	receiver    User             @relation("FriendReqReceived", fields: [receiverId], references: [id])
	receiverId  Int
	status      FriendshipStatus @default(PENDING)
	createdAt   DateTime         @default(now())

	@@unique([requesterId, receiverId])
}

model Match {
    id              Int              @id @default(autoincrement())
    player1         User             @relation("Player1", fields: [player1Id], references: [id])
    player1Id       Int              
    player2         User             @relation("Player2", fields: [player2Id], references: [id])
    player2Id       Int       
    status          MatchStatus      @default(PENDING)
    startAt         DateTime         @default(now())
    playedAt        DateTime         @default(now())
    result          String?
    tournamentMatch TournamentMatch?
}

model MatchMakingRequest {
	id        Int      @id @default(autoincrement())
	user      User     @relation("UserMatchRequest", fields: [userId], references: [id])
	userId    Int      @unique
	createdAt DateTime @default(now())
	rating    Int      @default(0)

	@@index([createdAt])
}

model Tournament {
	id              Int                      @id @default(autoincrement())
	name            String
	description     String?
	startDate       DateTime
	endDate         DateTime
	status	        TournamentStatus         @default(REGISTRATION)
	requiredPlayers Int                      @default(8)
	currentRound    Int                      @default(1)
	winnerId       Int?
	participants    TournamentParticipant[]
	matches         TournamentMatch[]

	@@index([status])
}

model TournamentMatch{
	id           Int        @id @default(autoincrement())
	match        Match      @relation(fields: [matchId], references: [id])
	matchId      Int        @unique
	tournament   Tournament @relation(fields: [tournamentId], references: [id])
	tournamentId Int
	round        Int
	bracketPos   Int
	nextMatchId  Int?
	winnerId     Int?
	createdAt    DateTime   @default(now())

	@@index([tournamentId, round])
	@@index([nextMatchId])
}

model TournamentParticipant {
	id             Int        @id @default(autoincrement())
	tournament     Tournament @relation(fields: [tournamentId], references: [id])
	tournamentId   Int
	user           User       @relation(fields: [userId], references: [id])
	userId         Int
	tournamentName String?
	registeredAt   DateTime   @default(now())

	@@unique([tournamentId, userId])
}
model Block {
	id        Int      @id @default(autoincrement())
	blocker   User     @relation("Blocker", fields: [blockerId], references: [id])
	blockerId Int
	blocked   User     @relation("Blocked", fields: [blockedId], references: [id])
	blockedId Int
	createdAt DateTime @default(now())

	@@unique([blockerId, blockedId])
}

model ChatMessage {
	id         Int         @id @default(autoincrement())
	sender     User        @relation("Sender", fields: [senderId], references: [id])
	senderId   Int
	receiver   User        @relation("Receiver", fields: [receiverId], references: [id])
	receiverId Int
	type       MessageType @default(TEXT)
	content    String
	createdAt  DateTime    @default(now())
	isRead     Boolean     @default(false)

	@@index([receiverId, isRead])
	@@unique([createdAt, id])
}

model GameInvitation {
	id          Int          @id @default(autoincrement())
	from        User         @relation("Inviter", fields: [fromId], references: [id])
	fromId      Int
	to          User         @relation("Invitee", fields: [toId], references: [id])
	toId        Int
	game        String       @default("Pong")
	status      InviteStatus @default(PENDING)
	createdAt   DateTime     @default(now())
	respondedAt DateTime?
	expiresAt   DateTime     

	@@index([toId, status])
	@@index([fromId, status])
}

enum InviteStatus {
	PENDING
	ACCEPTED
	REJECTED
}

enum FriendshipStatus {
	PENDING 
	ACCEPTED
	REJECTED
}

enum MatchStatus {
	PENDING 
	ONGOING
	COMPLETED
	CANCELLED
}

enum MessageType {
	TEXT
	INVITE_GAME
	TOURNAMENT
}

enum TournamentStatus {
	REGISTRATION
	READY
	ONGOING
	COMPLETED
}